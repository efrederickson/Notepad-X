<?xml version="1.0"?>
<doc>
<assembly>
<name>
SnapOn
</name>
</assembly>
<members>
<member name="P:SnapOn.PluginService.AvailablePlugins">
	<summary>
 A Collection of all Plugins Found and Loaded
 </summary>
</member><member name="M:SnapOn.PluginService.FindPlugins">
	<summary>
 Searches the Application's Startup Directory for Plugins
 </summary>
</member><member name="M:SnapOn.PluginService.FindPlugins(System.String)">
	<summary>
 Searches the Path for Plugins in .DLL/.EXE format
 </summary>
	<param name="Path">Directory to search for Plugins in</param>
</member><member name="M:SnapOn.PluginService.ClosePlugin(System.String)">
	<summary>
 Unloads and Closes pluginNameOrPath
 </summary>
</member><member name="M:SnapOn.PluginService.ClosePlugins">
	<summary>
 Close all the plugins
 </summary>
</member><member name="M:SnapOn.PluginService.GetPluginInfo(System.String,System.String)">
	<summary>
 Reads a toolbar file and returns the properties as array (Name,Author,Version,Description,DownloadURL)
 </summary>
	<returns>String array (Name,Author,Version,Description, DownloadURL)</returns>
	<param name="FileName">Filename of the plugin</param>
</member><member name="M:SnapOn.PackFileInfoCollection.AddFile(System.String,System.String)">
	<summary>
 Add a file to the collection
 </summary>
	<param name="Path">File path</param>
	<param name="ExtraPath">Extra Path for example \folder1, Can also be empty</param>
</member><member name="M:SnapOn.PackFileInfoCollection.AddFile(System.String)">
	<summary>
 Add a file to the collection
 </summary>
	<param name="Path">File path</param>
</member><member name="M:SnapOn.PackFileInfoCollection.AddDirectory(System.String,System.String)">
	<summary>
 Add all the files from a directory to the collection
 </summary>
	<param name="Directory">Directory path</param>
	<param name="ExtraPath">Extra Path for example \folder1, Can also be empty</param>
</member><member name="M:SnapOn.PackFileInfoCollection.AddDirectory(System.String)">
	<summary>
 Add all the files from a directory to the collection
 </summary>
	<param name="Directory">Directory path</param>
</member><member name="M:SnapOn.PackFileInfoCollection.CreateFileInfo">
	<summary>
 Returns the file info string which will be used for the package
 </summary>
</member><member name="T:SnapOn.PackFileInfoCollection">
	<summary>
 Collection for creating Packages
 </summary>
</member><member name="M:SnapOn.Packages.Unpack(System.String,System.String)">
	<summary>
 Unpack the package file at the selected directory
 </summary>
</member><member name="M:SnapOn.Packages.Pack(SnapOn.PackFileInfoCollection,System.String)">
	<summary>
 Create an file pack , join all the files from PackFileInfoCollection into a single file
 </summary>
</member><member name="T:SnapOn.Packages">
	<summary>
 Class for packing and unpacking Packages
 </summary>
	<remarks></remarks>
</member><member name="P:SnapOn.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:SnapOn.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:SnapOn.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:SnapOn.IPlugin.Version">
	<summary>
 The Snap-on Version
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SnapOn.IPlugin.Name">
	<summary>
 The Snap-on Name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SnapOn.IPlugin.DownloadURL">
	<summary>
 The http(s):// file location of the Package ([SnapOn].pack file) for this Snap-On
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SnapOn.IPlugin.Form">
	<summary>
 The Form
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SnapOn.IPlugin.Initialize">
	<summary>
 Creates the snap-on form
 </summary>
	<remarks></remarks>
</member><member name="M:SnapOn.IPlugin.Dispose">
	<summary>
 closes the snap-on form
 </summary>
	<remarks></remarks>
</member><member name="F:SnapOn.Download.file_type">
	<summary>
 Use General as default, or Autoclose to close the window the the download is completed
 </summary>
</member><member name="M:SnapOn.Download.#ctor(System.String,System.String,SnapOn.Download.DownloadTypes)">
	<summary>
 Creates a Download window to download a file over the internet
 </summary>
	<param name="url">The url of the file</param>
	<param name="path__1">The path of the file to be saved</param>
	<param name="type">The DownloadTypes type variable, Use General (AND) Autoclose as default</param>
</member><member name="T:SnapOn.Download">
	<summary>
 To start an download use :
 DLL As New Download(URL,path,type)
 DLL.ShowDialog();
 </summary>
</member><member name="T:SnapOn.DownloadCompleted">
	<summary>
 DownloadCompletedEvent
 </summary>
	<remarks></remarks>
</member><member name="M:SnapOn.AvailablePlugins.Add(SnapOn.AvailablePlugin)">
	<summary>
 Add a Plugin to the collection of Available plugins
 </summary>
	<param name="pluginToAdd">The Plugin to Add</param>
</member><member name="M:SnapOn.AvailablePlugins.Get(System.Int32)">
	<summary>
 Gets the AssemblyPath from the plugin from the collection at id
 </summary>
	<param name="id"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:SnapOn.AvailablePlugins.Remove(SnapOn.AvailablePlugin)">
	<summary>
 Remove a Plugin to the collection of available plugins
 </summary>
	<param name="pluginToRemove">The Plugin to Remove</param>
</member><member name="M:SnapOn.AvailablePlugins.Exist(System.String)">
	<summary>
 Checks if pluginNameOrPath exists in the collection of available plugins
 </summary>
	<param name="pluginNameOrPath">The Name/Path of the plugin to find</param>
	<returns>True if found, false if not found</returns>
	<remarks></remarks>
</member><member name="M:SnapOn.AvailablePlugins.Find(System.String)">
	<summary>
 Finds a plugin in the available Plugins
 </summary>
	<param name="pluginNameOrPath">The name or File path of the plugin to find</param>
	<returns>Available Plugin, or nothing if the plugin is not found</returns>
</member><member name="P:SnapOn.AvailablePlugin.Instance">
	<summary>
 The running Instance of this plugin
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SnapOn.AvailablePlugin.AssemblyPath">
	<summary>
 The filename of this plugin
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:SnapOn.AvailablePlugin">
	<summary>
 Data Class for Available Plugin.  Holds and instance of the loaded Plugin, as well as the Plugins Assembly Path
 </summary>
</member>
</members>
</doc>